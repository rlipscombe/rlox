use std::str::FromStr;
use crate::ast::*;

grammar;

pub Expr = BinaryOperator<Expr, CompareOp, Comparison>;
Comparison = BinaryOperator<Comparison, AddOp, Factor>;
Factor = BinaryOperator<Factor, MulOp, Term>;

CompareOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    "<=" => BinaryOp::Le,
    ">" => BinaryOp::Gt,
    ">=" => BinaryOp::Ge,
}

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Bool => Box::new(Expr::Boolean(<>)),
    "nil" => Box::new(Expr::Nil),
    "-" <n:Num> => Box::new(Expr::Number(-n)),
    "(" <Expr> ")",
};

Num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();
Bool: bool = {
    "true" => true,
    "false" => false,
}

// Helpers
BinaryOperator<Left, Operator, Right>: Box<Expr> = {
    Left Operator Right => Box::new(Expr::Binary(<>)),
    Right
}
