use std::str::FromStr;
use crate::ast::*;

grammar;

pub Expr = BinaryOperator<Expr, EqualityOp, Equality>;
Equality = BinaryOperator<Equality, CompareOp, Comparison>;
Comparison = BinaryOperator<Comparison, AddOp, Factor>;
Factor = BinaryOperator<Factor, MulOp, Unary>;
Unary = UnaryOperator<UnaryOp, Unary, Term>;

EqualityOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
}

CompareOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    "<=" => BinaryOp::Le,
    ">" => BinaryOp::Gt,
    ">=" => BinaryOp::Ge,
}

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

UnaryOp: UnaryOp = {
    "!" => UnaryOp::Invert,
    "-" => UnaryOp::Negate,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Bool => Box::new(Expr::Boolean(<>)),
    "nil" => Box::new(Expr::Nil),
    String => Box::new(Expr::String(<>)),
    "(" <Expr> ")",
};

Num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();
Bool: bool = {
    "true" => true,
    "false" => false,
}

// TODO: Support escape characters.
String: String = <s:r#""[^"]*""#> => (s[1..s.len()-1]).to_string();

// Helpers
UnaryOperator<Operator, Right, Next>: Box<Expr> = {
    Operator Right => Box::new(Expr::Unary(<>)),
    Next
}

BinaryOperator<Left, Operator, Right>: Box<Expr> = {
    Left Operator Right => Box::new(Expr::Binary(<>)),
    Right
}
