use std::str::FromStr;
use crate::ast::*;

grammar;

match {
    // Ignore C++-style comments
    r"//[^\n\r]*[\n\r]*" => {}
}
else {
    r"\s*" => {},
    _
}

pub Program = Declaration*;

Declaration: Stmt = {
    FunDecl,
    VarDecl,
    Statement,
}

FunDecl: Stmt = {
    <s:@L> "fun" <name:Identifier> "(" <params:Comma<Identifier>> ")" <e:@L> <body:Block> => Stmt::FunDecl {
        name: name.to_string(),
        params: params.iter().map(|p| p.to_string()).collect(),
        body: Box::new(body),
        location: location(s, e)
    }
}

VarDecl: Stmt = {
    <s:@L> "var" <i:Identifier> "=" <init:Expr> <e:@L> ";" => Stmt::VarDecl {
        name: i.to_string(),
        init: init,
        location: location(s, e)
    },
    <s:@L> "var" <i:Identifier> <e:@L> ";" => Stmt::VarDecl {
        name: i.to_string(),
        // TODO: Do we care that *we've* initialised it to nil, or that
        // the user did it? That is: Option<Expr> or Expr::Nil as default?
        init: Expr::Nil { location: location(s, e) },
        location: location(s, e)
    },
}

pub Statement = {
    ExprStmt,
    ForStmt,
    IfStmt,
    PrintStmt,
    AssertStmt,
    ReturnStmt,
    WhileStmt,
    Block
}

ExprStmt: Stmt = <Expr> ";" => Stmt::Expr(<>);
PrintStmt: Stmt = "print" <Expr> ";" => Stmt::Print(<>);
AssertStmt: Stmt = "assert" <s:@L> <expr:Expr> <e:@L>";" => Stmt::Assert { expr: expr, location: location(s, e) };
ReturnStmt: Stmt = "return" <Expr?> ";" => Stmt::Return(<>);
Block: Stmt = "{" <Declaration*> "}" => Stmt::Block(<>);

ForStmt: Stmt =
    <s:@L> "for" "(" <init:ForInit> <cond:ForCond> <incr:ForIncr> ")" <e:@L> <body:Block>
        => desugar_for(location(s, e), init, cond, incr, body);
ForInit: Option<Stmt> = {
    <VarDecl> => Some(<>),
    <ExprStmt> => Some(<>),
    ";" => None
}

ForCond: Option<Expr> = {
    <Expr> ";" => Some(<>),
    ";" => None
}

ForIncr: Option<Expr> = {
    <Expr> => Some(<>),
    () => None
};

// To avoid ambiguity in the grammar (see https://github.com/lalrpop/lalrpop/issues/386),
// we'll require that the 'if' statement take block statements.
IfStmt: Stmt = {
    "if" "(" <cond:Expr> ")" <then:Block> => Stmt::If {
        cond: cond,
        then: Box::new(then),
        else_: Box::new(Stmt::Empty)
    },

    "if" "(" <cond:Expr> ")" <then:Block> "else" <else_:Block> => Stmt::If {
        cond: cond,
        then: Box::new(then),
        else_: Box::new(else_)
    }
}

// For consistency, we'll require that the 'while' statement also take block statements.
// TODO: When we allow 'if' to take plain statements, we should fix this as well.
WhileStmt: Stmt =
    "while" "(" <cond:Expr> ")" <body:Block> => Stmt::While{
        cond: cond,
        body: Box::new(body)
    };

pub Expr = Assignment;

Assignment: Expr = {
    <s:@L> <i:Identifier> <e:@L> "=" <a:Assignment> => Expr::Assignment {
        name: i.to_string(),
        rhs: Box::new(a),
        location: location(s, e)
    },
    Equality
}

Equality = BinaryOperator<Equality, EqualityOp, Comparison>;
Comparison = BinaryOperator<Comparison, ComparisonOp, Addition>;
Addition = BinaryOperator<Addition, AdditionOp, Multiplication>;
Multiplication = BinaryOperator<Multiplication, MultiplicationOp, Unary>;
Unary = {
    UnaryOperator<UnaryOp, Unary, Term>,
    Call
}
Call: Expr = {
    <s:@L> <callee:Term> "(" <args:Comma<Expr>> ")" <e:@L> => Expr::Call {
        callee: Box::new(callee),
        args: args,
        location: location(s, e)
    },
    <s:@L> <callee:Call> "(" <args:Comma<Expr>> ")" <e:@L> => Expr::Call {
        callee: Box::new(callee),
        args: args,
        location: location(s, e)
    }
}

EqualityOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::Ne,
}

ComparisonOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    "<=" => BinaryOp::Le,
    ">" => BinaryOp::Gt,
    ">=" => BinaryOp::Ge,
}

AdditionOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

MultiplicationOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

UnaryOp: UnaryOp = {
    "!" => UnaryOp::Invert,
    "-" => UnaryOp::Negate,
}

Term: Expr = {
    <s:@L> <value:Num> <e:@L> => Expr::Number { value: value, location: location(s, e) },
    <s:@L> <value:Bool> <e:@L> => Expr::Boolean { value: value, location: location(s, e) },
    <s:@L> "nil" <e:@L> => Expr::Nil { location: location(s, e) },
    <s:@L> <value:String> <e:@L> => Expr::String { value: value, location: location(s, e) },
    "(" <Expr> ")",
    <s:@L> "fun" "(" <params:Comma<Identifier>> ")" <e:@L> <body:Block> => Expr::Fun {
        params: params.iter().map(|p| p.to_string()).collect(),
        body: Box::new(body),
        location: location(s, e)
    },
    <s:@L> <i:Identifier> <e:@L> => Expr::Var {
        name: i.to_string(),
        location: location(s, e)
    },
};

Num: f64 = r"[0-9]+(\.[0-9]+)?" => f64::from_str(<>).unwrap();
Bool: bool = {
    "true" => true,
    "false" => false,
}

// TODO: Support escape characters.
String: String = <s:r#""[^"]*""#> => (s[1..s.len()-1]).to_string();

Identifier = r#"[a-zA-Z_][a-zA-Z_0-9]*"#;

// Helpers
UnaryOperator<Operator, Right, Next>: Expr = {
    <s:@L> <op:Operator> <right:Right> <e:@L> => Expr::Unary {
        op: op,
        right: Box::new(right),
        location: location(s, e)
    },
    Next
}

BinaryOperator<Left, Operator, Right>: Expr = {
    <s:@L> <left:Left> <op:Operator> <right:Right> <e:@L> => Expr::Binary {
        left: Box::new(left),
        op: op,
        right: Box::new(right),
        location: location(s, e),
    },
    Right
}

// Note that this allows trailing delimiters. I like that, but it's not
// in the Lox language as defined.
Delim<T, Delimiter>: Vec<T> = {
    <v:(<T> Delimiter)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}
Comma<T>: Vec<T> = Delim<T, ","> => <>;
